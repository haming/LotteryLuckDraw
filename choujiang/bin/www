#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('choujiang:server');
var http = require('http');

var schedule = require("node-schedule");
var dao = require("../lib/dao.js");


var rule = new schedule.RecurrenceRule();
var times = [];
var LotteryNumber = 0;
var User_share = "no";

for (var i = 1; i < 60; i++) {
  times.push(i);
}
rule.second = times;
var reset_time = 0;

var j = schedule.scheduleJob(rule, function () {
  reset_time++;
  if (reset_time == 86400){
    console.log("执行重置");
    dao.reset_Users(LotteryNumber,User_share,function(err,result){
      if(err == null){
        console.log("重置成功!");
      }else{
        console.log("重置失败!");
      }
    });
    reset_time = 0;
  }else {
    console.log(reset_time);
  }

});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
